generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id            Int             @id @default(autoincrement())
  nome          String          @db.VarChar(100)
  email         String          @unique @db.VarChar(100)
  senha         String          @db.VarChar(255)
  regra         Permissao
  anotacoes     String?         @db.Text
  telefone      String?         @db.VarChar(20)
  status        StatusUsuario   @default(ativo)
  dataCriacao   DateTime        @default(now())
  grupoId       Int
  Contas        Contas[]
  Grupos        Grupos          @relation(fields: [grupoId], references: [id])
  ContasSistema ContasSistema[]

  @@index([grupoId], map: "Usuario_grupoId_fkey")
}

model Grupos {
  id         Int                  @id @default(autoincrement())
  grupo      String               @db.VarChar(100)
  createdAt  DateTime             @default(now())
  cor        String?              @default("white")
  Permissoes PermissoesOnGrupos[]
  Usuario    Usuario[]
}

model PermissoesOnGrupos {
  grupoId       Int
  createdAt     DateTime   @default(now())
  permissaoSlug String
  Grupo         Grupos     @relation(fields: [grupoId], references: [id])
  Permissao     Permissoes @relation(fields: [permissaoSlug], references: [slug])

  @@id([permissaoSlug, grupoId])
  @@index([grupoId], map: "PermissoesOnGrupos_grupoId_fkey")
}

model Permissoes {
  id        Int                  @id @default(autoincrement())
  cor       String?              @default("white")
  permissao String
  createdAt DateTime             @default(now())
  status    StatusUsuario        @default(ativo)
  slug      String               @unique
  Grupos    PermissoesOnGrupos[]
}

model Cliente {
  id           Int           @id @default(autoincrement())
  nome         String        @db.VarChar(100)
  email        String        @unique @db.VarChar(100)
  telefone     String?       @db.VarChar(20)
  endereco     String?       @db.Text
  dataCriacao  DateTime      @default(now())
  status       StatusUsuario @default(ativo)
  dataBloqueio DateTime?
  Assinatura   Assinatura[]
  Transacao    Transacao[]
}

model Plano {
  id              Int          @id @default(autoincrement())
  nome            String       @db.VarChar(100)
  descricao       String?      @db.Text
  preco           Float
  cor             String
  dataCriacao     DateTime     @default(now())
  dataAtualizacao DateTime?
  Assinatura      Assinatura[]
}

model Assinatura {
  id              Int        @id @default(autoincrement())
  clienteId       Int
  planoId         Int
  dataInicio      DateTime
  dataFim         DateTime
  status          Status     @default(ativa)
  dataBloqueio    DateTime?
  dataCriacao     DateTime   @default(now())
  dataDesbloqueio DateTime
  Cliente         Cliente    @relation(fields: [clienteId], references: [id])
  Plano           Plano      @relation(fields: [planoId], references: [id])
  Bloqueio        Bloqueio[]

  @@index([clienteId], map: "Assinatura_clienteId_fkey")
  @@index([planoId], map: "Assinatura_planoId_fkey")
}

model Transacao {
  id               Int               @id @default(autoincrement())
  clienteId        Int
  valor            Float             @default(0)
  descricao        String?           @db.Text
  categoriasId     Int
  contaId          Int
  dataEfetivado    DateTime?
  dataLancamento   DateTime          @default(now())
  desconto         Float?            @default(0)
  formaPagamentoId Int
  natureza         NaturezaTransacao
  operacao         TipoOperacao
  parcelado        Parcelado         @default(nao)
  parcelamentoId   Int?              @default(0)
  planoId          Int?
  servicoId        Int?
  status           StatusTransacao   @default(pendente)
  valorFinal       Float             @default(0)
  Parcelamento     Parcelamento[]
  Categoria        Categorias        @relation(fields: [categoriasId], references: [id])
  Cliente          Cliente           @relation(fields: [clienteId], references: [id])
  Conta            Contas            @relation(fields: [contaId], references: [id])
  FormaPagamento   FormasPagamento   @relation(fields: [formaPagamentoId], references: [id])

  @@index([categoriasId], map: "Transacao_categoriasId_fkey")
  @@index([clienteId], map: "Transacao_clienteId_fkey")
  @@index([contaId], map: "Transacao_contaId_fkey")
  @@index([formaPagamentoId], map: "Transacao_formaPagamentoId_fkey")
}

model Parcelas {
  id         Int             @id @default(autoincrement())
  nome       String
  quantidade Int             @default(1)
  periodo    PeriodoParcelas
}

model Configuracoes {
  id          Int      @id @default(autoincrement())
  chave       String
  valor       String
  dataCriacao DateTime @default(now())
}

model Parcelamento {
  id              Int             @id @default(autoincrement())
  transacaoId     Int
  parcela         Int
  status          StatusTransacao @default(pendente)
  valor           Float
  valorRecebido   Float?
  dataRecebimento DateTime?
  dataCadastro    DateTime        @default(now())
  Transacao       Transacao       @relation(fields: [transacaoId], references: [id], onDelete: Cascade)

  @@index([transacaoId], map: "Parcelamento_transacaoId_fkey")
}

model FormasPagamento {
  id        Int         @id @default(autoincrement())
  forma     String
  cor       String?
  Transacao Transacao[]
}

model Categorias {
  id        Int         @id @default(autoincrement())
  categoria String
  cor       String
  Transacao Transacao[]
}

model Contas {
  id        Int         @id @default(autoincrement())
  conta     String      @db.VarChar(200)
  saldo     Float       @default(0)
  regra     Regra       @default(privada)
  userId    Int
  cor       String?
  descricao String      @db.Text
  Usuario   Usuario     @relation(fields: [userId], references: [id])
  Transacao Transacao[]

  @@index([userId], map: "Contas_userId_fkey")
}

model Bloqueio {
  id              Int        @id @default(autoincrement())
  motivo          String     @db.Text
  dataBloqueio    DateTime
  dataDesbloqueio DateTime?
  assinaturaId    Int
  Assinatura      Assinatura @relation(fields: [assinaturaId], references: [id])

  @@index([assinaturaId], map: "Bloqueio_assinaturaId_fkey")
}

model ContasSistema {
  id                   Int                 @id @default(autoincrement())
  user_create_id       Int
  UserCreate           Usuario             @relation(fields: [user_create_id], references: [id])
  conta                String
  email                String              @unique
  slug                 String?
  descricao            String?             @db.Text
  plano                PlanosSistema       @default(free)
  status               ContasSistemaStatus @default(ativa)
  stripeCustomerId     String
  stripeSubscriptionId String?
  dataCriado           DateTime            @default(now())
  dataAtualizada       DateTime            @updatedAt
}

enum ContasSistemaStatus {
  ativa
  inativa
}

enum PlanosSistema {
  free
  pro
}

enum PeriodoParcelas {
  mensal
  semanal
  diario
  anual
}

enum Parcelado {
  sim
  nao
}

enum Status {
  ativa
  vencida
  cancelada
}

enum NaturezaTransacao {
  receita
  despesa
}

enum StatusTransacao {
  recebido
  pendente
  cancelada
}

enum Regra {
  publica
  privada
}

enum TipoOperacao {
  entrada
  saida
  transferencia
  ajuste
}

enum StatusUsuario {
  ativo
  inativo
}

enum Permissao {
  admin
  gerente
  moderador
  submoderador
  visualizador
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id             Int                @id @default(autoincrement())
  contaSistemaId Int
  ContaSistema   ContasSistema      @relation(fields: [contaSistemaId], references: [id])
  nome           String             @db.VarChar(100)
  email          String             @db.VarChar(100)
  senha          String             @db.VarChar(255)
  regra          Permissao
  anotacoes      String?            @db.Text
  telefone       String?            @db.VarChar(20)
  status         StatusUsuario      @default(ativo)
  dataCriacao    DateTime           @default(now())
  grupoId        Int
  Contas         FinanceiroContas[]
  Grupos         PermissoesGrupos   @relation(fields: [grupoId], references: [id])

  @@unique([email, contaSistemaId])
  @@index([grupoId], map: "Usuario_grupoId_fkey")
}

model PermissoesGrupos {
  id         Int                  @id @default(autoincrement())
  grupo      String               @db.VarChar(100)
  createdAt  DateTime             @default(now())
  cor        String?              @default("white")
  Permissoes PermissoesOnGrupos[]
  Usuario    Usuario[]
}

model PermissoesOnGrupos {
  grupoId       Int
  createdAt     DateTime         @default(now())
  permissaoSlug String
  Grupo         PermissoesGrupos @relation(fields: [grupoId], references: [id])
  Permissao     Permissoes       @relation(fields: [permissaoSlug], references: [slug])

  @@id([permissaoSlug, grupoId])
  @@index([grupoId], map: "PermissoesOnGrupos_grupoId_fkey")
}

model Permissoes {
  id        Int                  @id @default(autoincrement())
  cor       String?              @default("white")
  permissao String
  createdAt DateTime             @default(now())
  status    StatusUsuario        @default(ativo)
  slug      String               @unique
  Grupos    PermissoesOnGrupos[]
}

model Cliente {
  id             Int                   @id @default(autoincrement())
  contaSistemaId Int
  ContaSistema   ContasSistema         @relation(fields: [contaSistemaId], references: [id])
  nome           String                @db.VarChar(100)
  email          String                @unique @db.VarChar(100)
  telefone       String?               @db.VarChar(20)
  endereco       String?               @db.Text
  dataCriacao    DateTime              @default(now())
  status         StatusUsuario         @default(ativo)
  dataBloqueio   DateTime?
  Assinatura     Assinatura[]
  Transacao      FinanceiroTransacao[]
}

model Assinatura {
  id              Int                  @id @default(autoincrement())
  contaSistemaId  Int
  ContaSistema    ContasSistema        @relation(fields: [contaSistemaId], references: [id])
  clienteId       Int
  planoId         Int
  dataInicio      DateTime
  dataFim         DateTime
  status          Status               @default(ativa)
  dataBloqueio    DateTime?
  dataCriacao     DateTime             @default(now())
  dataDesbloqueio DateTime?
  Cliente         Cliente              @relation(fields: [clienteId], references: [id])
  Plano           AssinaturaPlano      @relation(fields: [planoId], references: [id])
  Bloqueio        AssinaturaBloqueio[]

  @@index([clienteId], map: "Assinatura_clienteId_fkey")
  @@index([planoId], map: "Assinatura_planoId_fkey")
}

model AssinaturaPlano {
  id              Int           @id @default(autoincrement())
  contaSistemaId  Int
  ContaSistema    ContasSistema @relation(fields: [contaSistemaId], references: [id])
  nome            String        @db.VarChar(100)
  descricao       String?       @db.Text
  preco           Float
  cor             String
  dataCriacao     DateTime      @default(now())
  dataAtualizacao DateTime?
  Assinatura      Assinatura[]
}

model AssinaturaBloqueio {
  id              Int           @id @default(autoincrement())
  contaSistemaId  Int
  ContaSistema    ContasSistema @relation(fields: [contaSistemaId], references: [id])
  motivo          String        @db.Text
  dataBloqueio    DateTime?
  dataDesbloqueio DateTime?
  assinaturaId    Int
  Assinatura      Assinatura    @relation(fields: [assinaturaId], references: [id])

  @@index([assinaturaId], map: "Bloqueio_assinaturaId_fkey")
}

model Configuracoes {
  id             Int           @id @default(autoincrement())
  contaSistemaId Int
  ContaSistema   ContasSistema @relation(fields: [contaSistemaId], references: [id])
  chave          String
  valor          String
  dataCriacao    DateTime      @default(now())
}

model FinanceiroTransacao {
  id                     Int                      @id @default(autoincrement())
  contaSistemaId         Int
  ContaSistema           ContasSistema            @relation(fields: [contaSistemaId], references: [id])
  clienteId              Int
  valor                  Float                    @default(0)
  descricao              String?                  @db.Text
  categoriasId           Int
  contaId                Int
  dataEfetivado          DateTime?
  dataLancamento         DateTime                 @default(now())
  desconto               Float?                   @default(0)
  formaPagamentoId       Int
  natureza               NaturezaTransacao
  operacao               TipoOperacao
  parcelado              Parcelado                @default(nao)
  status                 StatusTransacao          @default(pendente)
  valorFinal             Float                    @default(0)
  Categoria              FinanceiroCategorias     @relation(fields: [categoriasId], references: [id])
  Cliente                Cliente                  @relation(fields: [clienteId], references: [id])
  Conta                  FinanceiroContas         @relation(fields: [contaId], references: [id])
  FormaPagamento         FianceiroFormasPagamento @relation(fields: [formaPagamentoId], references: [id])
  FinanceiroParcelamento FinanceiroParcelamento[]

  @@index([categoriasId], map: "Transacao_categoriasId_fkey")
  @@index([clienteId], map: "Transacao_clienteId_fkey")
  @@index([contaId], map: "Transacao_contaId_fkey")
  @@index([formaPagamentoId], map: "Transacao_formaPagamentoId_fkey")
}

model FinanceiroParcelas {
  id             Int             @id @default(autoincrement())
  contaSistemaId Int
  ContaSistema   ContasSistema   @relation(fields: [contaSistemaId], references: [id])
  nome           String
  quantidade     Int             @default(1)
  periodo        PeriodoParcelas
}

model FinanceiroParcelamento {
  id              Int                 @id @default(autoincrement())
  contaSistemaId  Int
  ContaSistema    ContasSistema       @relation(fields: [contaSistemaId], references: [id])
  transacaoId     Int
  parcela         Int
  status          StatusTransacao     @default(pendente)
  valor           Float
  desconto        Float?
  valorRecebido   Float?
  dataRecebimento DateTime?
  dataCadastro    DateTime            @default(now())
  Transacao       FinanceiroTransacao @relation(fields: [transacaoId], references: [id], onDelete: Cascade)

  @@index([transacaoId], map: "Parcelamento_transacaoId_fkey")
}

model FianceiroFormasPagamento {
  id                  Int                   @id @default(autoincrement())
  contaSistemaId      Int
  ContaSistema        ContasSistema         @relation(fields: [contaSistemaId], references: [id])
  forma               String
  cor                 String?
  FinanceiroTransacao FinanceiroTransacao[]
}

model FinanceiroCategorias {
  id                  Int                   @id @default(autoincrement())
  contaSistemaId      Int
  ContaSistema        ContasSistema         @relation(fields: [contaSistemaId], references: [id])
  categoria           String
  cor                 String
  FinanceiroTransacao FinanceiroTransacao[]
}

model FinanceiroContas {
  id                  Int                   @id @default(autoincrement())
  contaSistemaId      Int
  ContaSistema        ContasSistema         @relation(fields: [contaSistemaId], references: [id])
  conta               String                @db.VarChar(200)
  saldo               Float                 @default(0)
  regra               Regra                 @default(privada)
  userId              Int
  cor                 String?
  descricao           String                @db.Text
  Usuario             Usuario               @relation(fields: [userId], references: [id])
  FinanceiroTransacao FinanceiroTransacao[]

  @@index([userId], map: "Contas_userId_fkey")
}

model ContasSistema {
  id                            Int                             @id @default(autoincrement())
  conta                         String
  email                         String                          @unique
  slug                          String?
  descricao                     String?                         @db.Text
  plano                         PlanosSistema                   @default(free)
  status                        ContasSistemaStatus             @default(ativa)
  stripeCustomerId              String
  stripeSubscriptionId          String?
  dataCriado                    DateTime                        @default(now())
  dataAtualizada                DateTime                        @updatedAt
  Usuario                       Usuario[]
  Cliente                       Cliente[]
  AssinaturaPlano               AssinaturaPlano[]
  Assinatura                    Assinatura[]
  Configuracoes                 Configuracoes[]
  FinanceiroTransacao           FinanceiroTransacao[]
  FinanceiroParcelas            FinanceiroParcelas[]
  FinanceiroParcelamento        FinanceiroParcelamento[]
  FianceiroFormasPagamento      FianceiroFormasPagamento[]
  FinanceiroCategorias          FinanceiroCategorias[]
  FinanceiroContas              FinanceiroContas[]
  Bloqueio                      AssinaturaBloqueio[]
  PatrimonioProdutos            PatrimonioProdutos[]
  PatrimonioProdutoCategoria    PatrimonioProdutoCategoria[]
  PatrimonioArmazenamentos      PatrimonioArmazenamentos[]
  PatrimonioProdutosEstoques    PatrimonioProdutosEstoques[]
  PatrimonioProdutosMovimentos  PatrimonioProdutosMovimentos[]
  PatrimonioFornecedores        PatrimonioFornecedores[]
  PatrimonioComprasFornecedores PatrimonioComprasFornecedores[]
}

model PatrimonioProdutos {
  id                            Int                             @id @default(autoincrement())
  produto                       String
  cor                           String
  contaSistemaId                Int
  ContaSistema                  ContasSistema                   @relation(fields: [contaSistemaId], references: [id])
  categoriaId                   Int
  Categoria                     PatrimonioProdutoCategoria      @relation(fields: [categoriaId], references: [id])
  descricao                     String                          @db.Text
  sku                           String
  preco                         Float                           @db.Double
  dataCriado                    DateTime                        @default(now())
  dataAtualizado                DateTime                        @updatedAt
  PatrimonioProdutosEstoques    PatrimonioProdutosEstoques[]
  PatrimonioProdutosMovimentos  PatrimonioProdutosMovimentos[]
  PatrimonioComprasFornecedores PatrimonioComprasFornecedores[]

  @@index([categoriaId], map: "categoria_produto_key")
}

model PatrimonioProdutoCategoria {
  id                 Int                  @id @default(autoincrement())
  categoria          String
  contaSistemaId     Int
  ContaSistema       ContasSistema        @relation(fields: [contaSistemaId], references: [id])
  descricao          String               @db.Text
  dataCriado         DateTime             @default(now())
  dataAtualizado     DateTime             @updatedAt
  PatrimonioProdutos PatrimonioProdutos[]
}

model PatrimonioArmazenamentos {
  id                           Int                            @id @default(autoincrement())
  armazen                      String
  local                        String?
  contaSistemaId               Int
  ContaSistema                 ContasSistema                  @relation(fields: [contaSistemaId], references: [id])
  dataCriado                   DateTime                       @default(now())
  dataAtualizado               DateTime                       @updatedAt
  PatrimonioProdutosEstoques   PatrimonioProdutosEstoques[]
  PatrimonioProdutosMovimentos PatrimonioProdutosMovimentos[]
}

model PatrimonioProdutosEstoques {
  id             Int                      @id @default(autoincrement())
  Produto        PatrimonioProdutos       @relation(fields: [produtoId], references: [id])
  produtoId      Int
  Armazen        PatrimonioArmazenamentos @relation(fields: [armazenId], references: [id])
  armazenId      Int
  contaSistemaId Int
  ContaSistema   ContasSistema            @relation(fields: [contaSistemaId], references: [id])
  estoqueMinimo  Int
  quantidade     Int                      @default(0)
  dataCriado     DateTime                 @default(now())
  dataAtualizado DateTime                 @updatedAt

  @@unique([produtoId, armazenId], map: "produto_armazen_id")
}

model PatrimonioProdutosMovimentos {
  id             Int                      @id @default(autoincrement())
  Produto        PatrimonioProdutos       @relation(fields: [produtoId], references: [id])
  produtoId      Int
  Armazen        PatrimonioArmazenamentos @relation(fields: [armazenId], references: [id])
  armazenId      Int
  contaSistemaId Int
  ContaSistema   ContasSistema            @relation(fields: [contaSistemaId], references: [id])
  tipo           PatrimonioTipoMovimento
  quantidade     Int
  dataMovimento  DateTime                 @default(now())
  descricao      String?

  @@index([produtoId])
  @@index([armazenId])
}

model PatrimonioFornecedores {
  id              Int                             @id @default(autoincrement())
  nome            String
  contato         String?
  email           String?
  descricao       String?                         @db.Text
  contaSistemaId  Int
  ContaSistema    ContasSistema                   @relation(fields: [contaSistemaId], references: [id])
  dataCriado      DateTime                        @default(now())
  dataAtualizado  DateTime                        @updatedAt
  ComprasProdutos PatrimonioComprasFornecedores[]
}

model PatrimonioComprasFornecedores {
  id             Int                    @id @default(autoincrement())
  Produto        PatrimonioProdutos     @relation(fields: [produtoId], references: [id])
  produtoId      Int
  Fornecedor     PatrimonioFornecedores @relation(fields: [fornecedorId], references: [id])
  fornecedorId   Int
  contaSistemaId Int
  ContaSistema   ContasSistema          @relation(fields: [contaSistemaId], references: [id])

  @@index([produtoId, fornecedorId], map: "produto_fornecedor_id")
}

enum PatrimonioTipoMovimento {
  entrada
  saida
}

enum ContasSistemaStatus {
  ativa
  vencida
  cancelada
  inativa
}

enum PlanosSistema {
  free
  pro
  admin
}

enum PeriodoParcelas {
  mensal
  semanal
  diario
  anual
}

enum Parcelado {
  sim
  nao
}

enum Status {
  ativa
  vencida
  cancelada
}

enum NaturezaTransacao {
  receita
  despesa
}

enum StatusTransacao {
  recebido
  pendente
  cancelada
}

enum Regra {
  publica
  privada
}

enum TipoOperacao {
  entrada
  saida
  transferencia
  ajuste
}

enum StatusUsuario {
  ativo
  inativo
}

enum Permissao {
  proprietario
  socio
  admin
  gerente
  moderador
  submoderador
  visualizador
}
